package gen

import (
	"path/filepath"

	. "github.com/rah-0/hyperion/util"
)

func templateEntity(s StructDef, v string) string {
	template := "package " + s.Name + "\n"
	template += "// The code in this file is autogenerated, do not modify manually!" + "\n\n"

	template += "import (\n"
	template += `"encoding/gob"` + "\n"
	template += ")\n"

	template += "func init(){\n"
	template += "gob.Register(" + s.Name + "{})\n"
	template += "}\n"

	template += "const (\n"
	template += `Version = "` + v + `"` + "\n"
	template += ")\n"

	template += "type " + s.Name + " struct {\n"
	for _, f := range s.Fields {
		template += f.Name + " " + f.Type + "\n"
	}
	template += "}\n"

	return template
}

func templateMigrations(sPrevious StructDef, sCurrent StructDef, vPrevious string, vCurrent string) (string, error) {
	mn, err := GetModuleName(filepath.Join("..", "go.mod"))
	if err != nil {
		return "", err
	}

	template := "package " + sCurrent.Name + "\n"
	template += "// NOTE: this file is generated only once, if you want to update it you can delete it and run the generator again!" + "\n\n"

	template += "import (\n"
	template += vPrevious + ` "` + filepath.Join(mn, "entities", sCurrent.Name, vPrevious) + `"`
	template += ")\n"

	template += `func Upgrade(previous ` + vPrevious + `.` + sPrevious.Name + `) (current ` + sCurrent.Name + `){` + "\n"
	template += `panic("Function not implemented")` + "\n"
	template += "}\n\n"

	template += `func Downgrade(current ` + sCurrent.Name + `) (previous ` + vPrevious + `.` + sPrevious.Name + `){` + "\n"
	template += `panic("Function not implemented")` + "\n"
	template += "}\n"

	return template, nil
}

func templateMigrationsTests(sPrevious StructDef, sCurrent StructDef, vPrevious string, vCurrent string) (string, error) {
	template := "package " + sCurrent.Name + "\n"
	template += "// NOTE: this file is generated only once, if you want to update it you can delete it and run the generator again!" + "\n\n"

	template += "import (\n"
	template += `"testing"`
	template += ")\n"

	template += `func TestUpgrade(t *testing.T) {` + "\n"
	template += `t.Fatal("Test not implemented")` + "\n"
	template += "}\n\n"

	template += `func TestDowngrade(t *testing.T) {` + "\n"
	template += `t.Fatal("Test not implemented")` + "\n"
	template += "}\n\n"

	return template, nil
}
